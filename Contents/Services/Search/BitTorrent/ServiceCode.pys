################################################################################
import metaprovider
import trakt

################################################################################
def Search(query):
    torrent_provider = metaprovider.MetaProvider()

    anime_torrent_infos = []
    torrent_provider.anime_search(query, anime_torrent_infos)

    movie_torrent_infos = []
    movie_ids = []
    trakt.movies_search(query, movie_ids)
    for movie_id in movie_ids:
        directory_object = DirectoryObject()
        imdb_id = trakt.movies_fill_movie_object(directory_object, movie_id)
        if imdb_id:
            torrent_provider.movies_get_specific_torrents(imdb_id, movie_torrent_infos)

    #tvshows_torrent_infos = []
    #torrent_provider.tvshows_search(query, tvshows_torrent_infos)

    torrent_infos = anime_torrent_infos[:5] + movie_torrent_infos[:5] + tvshows_torrent_infos[:5]
    torrent_infos.sort(key=lambda torrent_info: torrent_info.seeders, reverse=True)

    object_container = ObjectContainer(title2='Search')
    for torrent_info in torrent_infos[:10]:
        seeders_leechers_line = '{0}\nSeeders: {1}, Leechers: {2}'.format(torrent_info.size, torrent_info.seeders, torrent_info.leechers)

        if torrent_info.category == 'movies':
            movie_object = MovieObject()
            trakt.movies_fill_movie_object(movie_object, torrent_info.key)
            movie_object.title   = torrent_info.release
            movie_object.summary = '{0}\n\n{1}'.format(seeders_leechers_line, episode_object.summary)
            movie_object.url     = torrent_info.url
            object_container.add(movie_object)

        elif torrent_info.category == 'tvshows':
            episode_object = EpisodeObject()
            trakt.tvshows_fill_episode_object(episode_object, torrent_info.key[0], torrent_info.key[1], torrent_info.key[2])
            episode_object.title   = torrent_info.release
            episode_object.summary = '{0}\n\n{1}'.format(seeders_leechers_line, episode_object.summary)
            episode_object.url     = torrent_info.url
            object_container.add(episode_object)
        else:
            videoclip_object         = VideoClipObject()
            videoclip_object.title   = torrent_info.title
            videoclip_object.summary = seeders_leechers_line
            videoclip_object.url     = torrent_info.url
            object_container.add(videoclip_object)

    return object_container

################################################################################
import common
import tmdb

################################################################################
YTS      = 'http://yts.re'
YTS_LIST = YTS + '/api/list.json?limit=50&keywords={0}&genre={1}&quality={2}&sort={3}&set={4}'

################################################################################
class YTSProvider(common.TorrentProvider):
    ############################################################################
    # MOVIES
    ############################################################################
    def movies_get_popular_torrents(self, torrent_infos):
        self.parse_result_page(YTS + '/api/list.json?limit=50&sort=seeds', torrent_infos)

    def movies_search(self, query, torrent_infos):
        self.parse_result_page(YTS + '/api/list.json?limit=50&sort=seeds&keywords={0}'.format(String.Quote(query)), torrent_infos)

    def movies_get_specific_torrents(self, movie_info, torrent_infos):
        imdb_id = tmdb.get_imdb_id_from_title(movie_info.title, movie_info.year)
        query   = imdb_id if imdb_id else movie_info.title.replace('.', ' ').replace('-', ' ')
        self.parse_result_page(YTS + '/api/list.json?limit=50&sort=seeds&keywords={0}'.format(String.Quote(json_query)), torrent_infos, movie_info.key)

    ############################################################################
    # COMMON
    ############################################################################
    def get_torrent_info_for_url(self, url):
        if url.startswith(YTS):
            page_data = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)

            movie_id = page_data.xpath('//*[@class="magnet torrentDwl"]/@data-movieid')[0]

            json_url  = YTS + '/api/movie.json?id={0}'.format(movie_id)
            json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1DAY)

            torrent_magnet   = json_data['TorrentMagnetUrl']
            torrent_title    = '{0} ({1}) {2}'.format(json_data['MovieTitleClean'], json_data['MovieYear'], json_data['Quality'])
            torrent_url      = url
            torrent_seeders  = int(json_data['TorrentSeeds'])
            torrent_leechers = int(json_data['TorrentPeers'])
            torrent_size     = int(json_data['SizeByte'])

            torrent_info                 = common.TorrentInfo(torrent_magnet, torrent_title, torrent_url, torrent_seeders, torrent_leechers)
            torrent_info.data['imdb_id'] = json_data['ImdbCode']

            return torrent_info

    ############################################################################
    # INTERNAL
    ############################################################################
    def parse_result_page(self, url, torrent_infos, movie_key=None):
        try:
            json_url  = url
            json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1HOUR)

            for json_item in json_data['MovieList']:
                self.add_torrent_info(torrent_infos, movie_key, json_item['TorrentMagnetUrl'],
                                                                '{0} ({1}) {2}'.format(json_item['MovieTitleClean'], json_item['MovieYear'], json_item['Quality']),
                                                                json_item['MovieUrl']
                                                                int(json_item['TorrentSeeds']),
                                                                int(json_item['TorrentPeers']),
                                                                int(json_item['SizeByte']))
        except Exception as exception:
            Log.Error('[BitTorrent][YTSProvider] Unhandled exception: {0}'.format(exception))

################################################################################
import common
import re
import tmdb

################################################################################
THEPIRATEBAY = 'http://thepiratebay.se'

RE_IMDB_ID  = re.compile('http://www.imdb.com/title/(.+)/')
RE_SEEDERS  = re.compile('<dt>Seeders:</dt>\s*<dd>(\d+)</dd>')
RE_LEECHERS = re.compile('<dt>Leechers:</dt>\s*<dd>(\d+)</dd>')
RE_SIZE     = re.compile('(\s|(&nbsp;))*(\d+\.\d+)(\s|(&nbsp;))((MiB)|(GiB))')

################################################################################
class ThePirateBayProvider(common.TorrentProvider):
    ############################################################################
    # MOVIES
    ############################################################################
    def movies_get_popular_torrents(self, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/top/201', torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/top/207', torrent_infos)

    def movies_search(self, query, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/201'.format(String.Quote(query)), torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/207'.format(String.Quote(query)), torrent_infos)

    def movies_get_specific_torrents(self, movie_info, torrent_infos):
        imdb_id = tmdb.get_imdb_id_from_title(movie_info.title, movie_info.year)
        query   = imdb_id if imdb_id else movie_info.title
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/200'.format(String.Quote(query)), torrent_infos, movie_info.key)

    ############################################################################
    # TVSHOWS
    ############################################################################
    def tvshows_get_popular_torrents(self, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/top/205', torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/top/208', torrent_infos)

    def tvshows_search(self, query, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/205'.format(String.Quote(query)), torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/208'.format(String.Quote(query)), torrent_infos)

    def tvshows_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    ############################################################################
    # COMMON
    ############################################################################
    def get_torrent_info_for_url(self, url):
        if url.startswith(THEPIRATEBAY):
            page_data     = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)
            page_data_raw = HTML.StringFromElement(page_data)

            torrent_url      = url
            torrent_magnet   = page_data.xpath('//a[@title="Get this torrent"]/@href')[0]
            torrent_title    = page_data.xpath('//div[@id="title"]')[0].text.strip()
            
            try:
                torrent_seeders = int(RE_SEEDERS.search(page_data_raw).group(1))
            except:
                torrent_seeders = 0

            try:
                torrent_leechers = int(RE_LEECHERS.search(page_data_raw).group(1))
            except:
                torrent_leechers = 0

            try:
                torrent_size_str  = page_data.xpath('//*[@id="details"]/dl[1]/dd[3]/text()')[0]
                torrent_size_num  = float(RE_SIZE.search(size_str).group(3))
                torrent_size_type = RE_RESULT_SIZE.search(size_str).group(6)

                if torrent_size_type == 'MiB':
                    torrent_size = int(torrent_size_num * 1024.0 * 1024.0)
                elif torrent_size_type == 'GiB':
                    torrent_size = int(torrent_size_num * 1024.0 * 1024.0 * 1024.0)
            except:
                torrent_size = 0

            torrent_info = common.TorrentInfo(torrent_magnet, torrent_title, torrent_url, torrent_seeders, torrent_leechers, torrent_size)
            
            try:
                if page_data.xpath('//*[@id="details"]/dl[1]/dd[1]/a/@href')[0] in ('/browse/201', '/browse/207'):
                    torrent_info.data['category'] = 'movies'

                    imdb_link                    = page_data.xpath('//a[@title="IMDB"]/@href')[0]
                    torrent_info.data['imdb_id'] = RE_IMDB_ID.search(imdb_link).group(1)
            except:
                pass

            try:
                if page_data.xpath('//*[@id="details"]/dl[1]/dd[1]/a/@href')[0] in ('/browse/205', '/browse/208'):
                    torrent_info.data['category'] = 'tvshows'
            except:
                pass

            return torrent_info

    ############################################################################
    # INTERNAL
    ############################################################################
    def parse_result_page(self, url, torrent_infos, movie_key=None):
        try:
            html_url  = url
            html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

            for html_item in html_data.xpath('//*[@id="searchResult"]/tbody/tr'):
                try:
                    size_str  = html_item.xpath('.td[2]/font[@class="detDesc"]/text()')[0]
                    size_num  = float(RE_SIZE.search(size_str).group(3))
                    size_type = RE_RESULT_SIZE.search(size_str).group(6)

                    if size_type == 'MiB':
                        size = int(size_num * 1024.0 * 1024.0)
                    elif size_type == 'GiB':
                        size = int(size_num * 1024.0 * 1024.0 * 1024.0)
                except:
                    size = 0

                self.add_torrent_info(torrent_infos, movie_key, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                                html_item.xpath('./td[2]/div/a/text()')[0],
                                                                THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0],
                                                                int(html_item.xpath('./td[3]/text()')[0]),
                                                                int(html_item.xpath('./td[4]/text()')[0]),
                                                                size)
        except Exception as exception:
            Log.Error('[BitTorrent][ThePirateBayProvider] Unhandled exception: {0}'.format(exception))

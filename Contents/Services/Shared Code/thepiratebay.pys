################################################################################
import common
import movies
import re
import tmdb

################################################################################
THEPIRATEBAY = 'http://thepiratebay.se'

RE_IMDB_ID = re.compile('http://www.imdb.com/title/(.+)/')

################################################################################
class ThePirateBayProvider(common.TorrentProvider):
    ############################################################################
    # MOVIES
    ############################################################################
    def movies_get_popular_torrents(self, torrent_infos):
        html_url  = THEPIRATEBAY + '/top/201'
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                       html_item.xpath('./td[2]/div/a/text()')[0],
                                                       int(html_item.xpath('./td[3]/text()')[0]),
                                                       int(html_item.xpath('./td[4]/text()')[0]),
                                                       THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

        html_url  = THEPIRATEBAY + '/top/207'
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                       html_item.xpath('./td[2]/div/a/text()')[0],
                                                       int(html_item.xpath('./td[3]/text()')[0]),
                                                       int(html_item.xpath('./td[4]/text()')[0]),
                                                       THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

    def movies_search(self, query, torrent_infos):
        html_url  = THEPIRATEBAY + '/search/{0}/0/7/201'.format(String.Quote(query))
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                 html_item.xpath('./td[2]/div/a/text()')[0],
                                                 int(html_item.xpath('./td[3]/text()')[0]),
                                                 int(html_item.xpath('./td[4]/text()')[0]),
                                                 THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

        html_url  = THEPIRATEBAY + '/search/{0}/0/7/207'.format(String.Quote(query))
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                 html_item.xpath('./td[2]/div/a/text()')[0],
                                                 int(html_item.xpath('./td[3]/text()')[0]),
                                                 int(html_item.xpath('./td[4]/text()')[0]),
                                                 THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

    def movies_get_specific_torrents(self, movie_info, torrent_infos):
        imdb_id = tmdb.get_imdb_id_from_title(movie_info.title, movie_info.year)

        html_query = imdb_id if imdb_id else movie_info.title
        html_url   = THEPIRATEBAY + '/search/{0}/0/7/200'.format(String.Quote(html_query))
        html_data  = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, movie_info.key, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                                 html_item.xpath('./td[2]/div/a/text()')[0],
                                                                 int(html_item.xpath('./td[3]/text()')[0]),
                                                                 int(html_item.xpath('./td[4]/text()')[0]),
                                                                 THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

    ############################################################################
    # TVSHOWS
    ############################################################################
    def tvshows_get_popular_torrents(self, torrent_infos):
        html_url  = THEPIRATEBAY + '/top/205'
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                       html_item.xpath('./td[2]/div/a/text()')[0],
                                                       int(html_item.xpath('./td[3]/text()')[0]),
                                                       int(html_item.xpath('./td[4]/text()')[0]),
                                                       THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

        html_url  = THEPIRATEBAY + '/top/208'
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                       html_item.xpath('./td[2]/div/a/text()')[0],
                                                       int(html_item.xpath('./td[3]/text()')[0]),
                                                       int(html_item.xpath('./td[4]/text()')[0]),
                                                       THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

    def tvshows_search(self, query, torrent_infos):
        html_url  = THEPIRATEBAY + '/search/{0}/0/7/205'.format(String.Quote(query))
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                 html_item.xpath('./td[2]/div/a/text()')[0],
                                                 int(html_item.xpath('./td[3]/text()')[0]),
                                                 int(html_item.xpath('./td[4]/text()')[0]),
                                                 THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

        html_url  = THEPIRATEBAY + '/search/{0}/0/7/208'.format(String.Quote(query))
        html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
            self.add_torrent_info(torrent_infos, None, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                 html_item.xpath('./td[2]/div/a/text()')[0],
                                                 int(html_item.xpath('./td[3]/text()')[0]),
                                                 int(html_item.xpath('./td[4]/text()')[0]),
                                                 THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0])

    def tvshows_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    ############################################################################
    # COMMON
    ############################################################################
    def get_torrent_info_for_url(self, url):
        if url.startswith(THEPIRATEBAY):
            page_data = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)

            torrent_url      = url
            torrent_magnet   = page_data.xpath('//a[@title="Get this torrent"]/@href')[0]
            torrent_title    = page_data.xpath('//div[@id="title"]')[0].text.strip()
            
            try:
                torrent_seeders = int(page_data.xpath('//*[@id="details"]/dl[1]/dd[9]/text()')[0].strip())
            except:
                torrent_seeders = 'Unknown'

            try:
                torrent_leechers = int(page_data.xpath('//*[@id="details"]/dl[1]/dd[10]/text()')[0].strip())
            except:
                torrent_leechers = 'Unknown'

            torrent_info = common.TorrentInfo(torrent_magnet, torrent_title, torrent_seeders, torrent_leechers, torrent_url)
            
            try:
                imdb_link                     = page_data.xpath('//a[@title="IMDB"]/@href')[0]
                torrent_info.data['imdb_id']  = RE_IMDB_ID.search(imdb_link).group(1)
                torrent_info.data['category'] = 'movies'
            except:
                pass

            try:
                if page_data.xpath('//*[@id="details"]/dl[1]/dd[1]/a/@href')[0] in ('/browse/205', '/browse/208'):
                    torrent_info.data['category'] = 'tvshows'
            except:
                pass

            return torrent_info

################################################################################
import common
import re
import tmdb

################################################################################
THEPIRATEBAY = 'http://thepiratebay.se'

RE_IMDB_ID     = re.compile('http://www.imdb.com/title/(.+)/')
RE_SEEDERS     = re.compile('<dt>Seeders:</dt>\s*<dd>(\d+)</dd>')
RE_LEECHERS    = re.compile('<dt>Leechers:</dt>\s*<dd>(\d+)</dd>')
RE_RESULT_SIZE = re.compile('(\d+.\d+).(MiB|GiB)')
RE_URL_SIZE    = re.compile('\((\d+).Bytes\)')

################################################################################
class ThePirateBayProvider(common.TorrentProvider):
    ############################################################################
    # MOVIES
    ############################################################################
    def movies_get_popular_torrents(self, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/top/201', 'movies', torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/top/207', 'movies', torrent_infos)

    def movies_search(self, query, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/201'.format(String.Quote(query)), 'movies', torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/207'.format(String.Quote(query)), 'movies', torrent_infos)

    def movies_get_specific_torrents(self, imdb_id, torrent_infos):
        query = imdb_id
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/200'.format(String.Quote(query)), 'movies', torrent_infos, imdb_id)

    ############################################################################
    # TVSHOWS
    ############################################################################
    def tvshows_get_popular_torrents(self, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/top/205', 'tvshows', torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/top/208', 'tvshows', torrent_infos)

    def tvshows_search(self, query, torrent_infos):
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/205'.format(String.Quote(query)), 'tvshows', torrent_infos)
        self.parse_result_page(THEPIRATEBAY + '/search/{0}/0/7/208'.format(String.Quote(query)), 'tvshows', torrent_infos)

    def tvshows_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    ############################################################################
    # COMMON
    ############################################################################
    def get_torrent_info_for_url(self, url):
        if url.startswith(THEPIRATEBAY):
            page_data     = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)
            page_data_raw = HTML.StringFromElement(page_data)

            torrent_url      = url
            torrent_magnet   = page_data.xpath('//a[@title="Get this torrent"]/@href')[0]
            torrent_title    = page_data.xpath('//div[@id="title"]')[0].text.strip()
            
            try:
                torrent_seeders = int(RE_SEEDERS.search(page_data_raw).group(1))
            except:
                torrent_seeders = 0

            try:
                torrent_leechers = int(RE_LEECHERS.search(page_data_raw).group(1))
            except:
                torrent_leechers = 0

            try:
                torrent_size_str = page_data.xpath('//*[@id="details"]/dl[1]/dd[3]/text()')[0]
                torrent_size     = RE_URL_SIZE.search(torrent_size_str).group(1)
            except:
                torrent_size = 0

            torrent_key      = torrent_title
            torrent_category = None

            try:
                if page_data.xpath('//*[@id="details"]/dl[1]/dd[1]/a/@href')[0] in ('/browse/201', '/browse/207'):
                    imdb_link        = page_data.xpath('//a[@title="IMDB"]/@href')[0]
                    torrent_key      = RE_IMDB_ID.search(imdb_link).group(1)
                    torrent_category = 'movies'
            except:
                pass

            try:
                if page_data.xpath('//*[@id="details"]/dl[1]/dd[1]/a/@href')[0] in ('/browse/205', '/browse/208'):
                    torrent_category = 'tvshows'
            except:
                pass    

            return common.TorrentInfo(torrent_magnet, torrent_title, torrent_url, torrent_key, torrent_category, torrent_seeders, torrent_leechers, torrent_size)

    ############################################################################
    # INTERNAL
    ############################################################################
    def parse_result_page(self, url, category, torrent_infos, ref_torrent_key=None):
        try:
            html_url  = url
            html_data = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

            for html_item in html_data.xpath('//*[@id="searchResult"]/tr'):
                torrent_key = html_item.xpath('./td[2]/div/a/text()')[0]

                if category == 'movies':
                    torrent_key = tmdb.get_imdb_id_from_torrent_title(torrent_key)

                if torrent_key:
                    try:
                        size_str  = html_item.xpath('./td[2]/font[@class="detDesc"]/text()')[0]
                        size_num  = float(RE_RESULT_SIZE.search(size_str).group(1))
                        size_type = RE_RESULT_SIZE.search(size_str).group(2)

                        if size_type == 'MiB':
                            size = int(size_num * 1024.0 * 1024.0)
                        elif size_type == 'GiB':
                            size = int(size_num * 1024.0 * 1024.0 * 1024.0)
                    except:
                        size = 0

                    self.add_torrent_info(torrent_infos, ref_torrent_key, html_item.xpath('./td[2]/a[1]/@href')[0],
                                                                          html_item.xpath('./td[2]/div/a/text()')[0],
                                                                          THEPIRATEBAY + html_item.xpath('./td[2]/div/a/@href')[0],
                                                                          torrent_key,
                                                                          category,
                                                                          int(html_item.xpath('./td[3]/text()')[0]),
                                                                          int(html_item.xpath('./td[4]/text()')[0]),
                                                                          size)
        except Exception as exception:
            Log.Error('[BitTorrent][ThePirateBayProvider] Unhandled exception: {0}'.format(exception))

################################################################################
import re
import tmdb

################################################################################
RE_MOVIE_TITLE      = re.compile('(.+)\s+(\(|\[)?(\d{4})(\)|\])?\s+(.+)')
RE_MAGNET_INFO_HASH = re.compile('xt=urn:btih:([a-zA-Z0-9]+)')

################################################################################
class MovieInfo:
    def __init__(self, torrent_title=''):
        self.title   = torrent_title
        self.year    = ''
        self.tmdb_id = ''
        self.imdb_id = ''
        self.key     = torrent_title

        title_re_result = RE_MOVIE_TITLE.search(torrent_title.replace('.', ' '))
        if title_re_result:
            self.title = title_re_result.group(1)
            self.year  = title_re_result.group(3)

            self.tmdb_id, self.title = tmdb.get_tmdb_id_from_title(self.title, self.year)
            self.imdb_id             = tmdb.get_imdb_id_from_title(self.title, self.year)
            self.key                 = self.tmdb_id

    def to_dict(self):
        return { 
                    'title':    self.title,
                    'year':     self.year,
                    'tmdb_id':  self.tmdb_id,
                    'imdb_id':  self.imdb_id,
                    'key':      self.key
               }

    @staticmethod
    def from_dict(dict):
        result         = MovieInfo()
        result.title   = dict['title']
        result.year    = dict['year']
        result.tmdb_id = dict['tmdb_id']
        result.imdb_id = dict['imdb_id']
        result.key     = dict['key']
        return result

################################################################################
def get_torrent_release(torrent_title):
    movie_title_result = RE_MOVIE_TITLE.search(torrent_title.replace('.', ' '))
    return movie_title_result.group(5) if movie_title_result else torrent_title

################################################################################
def add_torrent_to_torrent_infos(torrent_infos, torrent_title, torrent_url, torrent_magnet, torrent_seeders, torrent_leechers):
    if not torrent_seeders:
        return

    torrent_info_hash = RE_MAGNET_INFO_HASH.search(torrent_magnet).group(1).lower()

    if not [t for t in torrent_infos if torrent_info_hash == t['info_hash']]:
        torrent_info = {}
        torrent_info['title']     = torrent_title
        torrent_info['url']       = torrent_url
        torrent_info['magnet']    = torrent_magnet
        torrent_info['info_hash'] = torrent_info_hash
        torrent_info['seeders']   = torrent_seeders
        torrent_info['leechers']  = torrent_leechers
        torrent_info['release']   = get_torrent_release(torrent_info['title'])    
        torrent_infos.append(torrent_info)

################################################################################
import re
import trakt

################################################################################
PREFIX  = '/video/bittorrent'
VERSION = '0.5.6.1'

RE_MAGNET_INFO_HASH  = re.compile('xt=urn:btih:([a-zA-Z0-9]+)')
RE_MOVIE_TITLE       = re.compile('(.+?)\s*?[\[\(]?(\d{4})[\]|\)]?\s*(.+)', re.IGNORECASE)
RE_TVSHOW_TITLE      = re.compile('(.+)\s+(s|)(\d+)(e|x)(\d+)\s+(.+)', re.IGNORECASE)
RE_TVSHOW_TITLE_YEAR = re.compile('(.+)\s+\((\d+)\)$')

################################################################################
class TorrentInfo:
    def __init__(self, magnet, title, url, key, category, seeders=0, leechers=0, size=0):
        self.magnet    = magnet
        self.info_hash = RE_MAGNET_INFO_HASH.search(magnet).group(1).lower()
        self.title     = title
        self.release   = get_torrent_release(title, category)
        self.url       = url
        self.key       = key
        self.category  = category
        self.seeders   = seeders
        self.leechers  = leechers
        
        size_gb = float(size) / 1024.0 / 1024.0 / 1024.0
        size_mb = float(size) / 1024.0 / 1024.0
        size_kb = float(size) / 1024.0
        if size_gb > 1.0:
            self.size = '%.2f GB' % size_gb
        elif size_mb > 1.0:
            self.size = '%.2f MB' % size_mb
        elif size_kb > 1.0:
            self.size = '%.2f KB' % size_kb
        else:
            self.size = '%.2f B' % size

################################################################################
def get_torrent_release(torrent_title, category):
    try:
        if category == 'anime':
            # TODO
            return torrent_title
        elif category == 'movies':
            movie_title_result = RE_MOVIE_TITLE.search(torrent_title.replace('.', ' '))
            return movie_title_result.group(3)
        elif category == 'tvshows':
            movie_title_result = RE_TVSHOW_TITLE.search(torrent_title.replace('.', ' '))
            return movie_title_result.group(6)
    except:
        return torrent_title

################################################################################
class TorrentProvider:
    ############################################################################
    # ANIME
    ############################################################################
    def anime_get_popular_torrents(self, torrent_infos):
        pass

    def anime_search(self, query, torrent_infos):
        pass

    def anime_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    def anime_get_metadata_object_for_url(self, url):
        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info and torrent_info.category == 'anime':
            metadata_object         = VideoClipObject()
            metadata_object.title   = torrent_info.title
            metadata_object.summary = '{0}\n{1}\nSeeders: {2}, Leechers: {3}\n\n{4}'.format(torrent_info.release, torrent_info.size, torrent_info.seeders, torrent_info.leechers, metadata_object.summary)
            return metadata_object

    ############################################################################
    # MOVIES
    ############################################################################
    def movies_get_specific_torrents(self, imdb_id, torrent_infos):
        pass

    def movies_get_metadata_object_for_url(self, url):
        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info and torrent_info.category == 'movies':
            movie_object = MovieObject()
            trakt.movies_fill_movie_object(movie_object, torrent_info.key)
            movie_object.summary = '{0}\n{1}\nSeeders: {2}, Leechers: {3}\n\n{4}'.format(torrent_info.release, torrent_info.size, torrent_info.seeders, torrent_info.leechers, movie_object.summary)
            return movie_object

    ############################################################################
    # TVSHOWS
    ############################################################################
    def tvshows_get_specific_torrents(self, tvdb_id, season_index, episode_index, torrent_infos):
        pass

    def tvshows_get_metadata_object_for_url(self, url):
        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info and torrent_info.category == 'tvshows':
            episode_object = EpisodeObject()
            trakt.tvshows_fill_episode_object(episode_object, torrent_info.key[0], torrent_info.key[1], torrent_info.key[2])
            episode_object.summary = '{0}\n{1}\nSeeders: {2}, Leechers: {3}\n\n{4}'.format(torrent_info.release, torrent_info.size, torrent_info.seeders, torrent_info.leechers, episode_object.summary)
            return episode_object

    ############################################################################
    # COMMON
    ############################################################################
    def get_torrent_info_for_url(self, url):
        pass

    def get_metadata_object_for_url(self, url):
        metadata_object = self.anime_get_metadata_object_for_url(url)
        if metadata_object:
            return metadata_object

        metadata_object = self.movies_get_metadata_object_for_url(url)
        if metadata_object:
            return metadata_object

        metadata_object = self.tvshows_get_metadata_object_for_url(url)
        if metadata_object:
            return metadata_object

        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info:
            videoclip_object         = VideoClipObject()
            videoclip_object.title   = torrent_info.title
            videoclip_object.summary = '{0}\nSeeders: {1}, Leechers: {2}'.format(torrent_info.size, torrent_info.seeders, torrent_info.leechers)
            videoclip_object.url     = torrent_info.url
            return videoclip_object

    def get_media_objects_for_url(self, url, play_func):
        torrent_info = self.get_torrent_info_for_url(url)

        if torrent_info:
            if torrent_info.category == 'anime':
                download_dir = Prefs['ANIME_DOWNLOAD_DIR']
            elif torrent_info.category == 'movies':
                download_dir = Prefs['MOVIES_DOWNLOAD_DIR']
            elif torrent_info.category == 'tvshows':
                download_dir = Prefs['TVSHOWS_DOWNLOAD_DIR']
            else:
                download_dir = Prefs['MOVIES_DOWNLOAD_DIR']

            media_object = MediaObject()
            media_object.add(PartObject(key=Callback(play_func, url=url, magnet=torrent_info.magnet, download_dir=download_dir)))

            if self.release_contains_pattern(torrent_info.release, ['avi']):
                media_object.container = 'avi'
            elif self.release_contains_pattern(torrent_info.release, ['flv']):
                media_object.container = 'flv'
            elif self.release_contains_pattern(torrent_info.release, ['mkv']):
                media_object.container = 'mkv'
            elif self.release_contains_pattern(torrent_info.release, ['mov']):
                media_object.container = 'mov'
            elif self.release_contains_pattern(torrent_info.release, ['mp4']):
                media_object.container = 'mp4'

            if self.release_contains_pattern(torrent_info.release, ['aac']):
                media_object.audio_codec = 'aac'
            elif self.release_contains_pattern(torrent_info.release, ['ac3']):
                media_object.audio_codec = 'ac3'
            elif self.release_contains_pattern(torrent_info.release, ['dts']):
                media_object.audio_codec = 'dts'
            elif self.release_contains_pattern(torrent_info.release, ['mp3']):
                media_object.audio_codec = 'mp3'

            if self.release_contains_pattern(torrent_info.release, ['x264', 'h264']):
                media_object.video_codec = 'h264'
            elif self.release_contains_pattern(torrent_info.release, ['divx']):
                media_object.video_codec = 'divx'
            elif self.release_contains_pattern(torrent_info.release, ['xvid']):
                media_object.video_codec = 'xvid'

            if self.release_contains_pattern(torrent_info.release, ['1080p', '1920x1080']):
                media_object.video_resolution = 1080
            elif self.release_contains_pattern(torrent_info.release, ['720p', '1280x720']):
                media_object.video_resolution = 720
            elif self.release_contains_pattern(torrent_info.release, ['480p']):
                media_object.video_resolution = 480

            return [media_object]

    def add_torrent_info(self, torrent_infos, ref_torrent_key, torrent_magnet, torrent_title, torrent_url, torrent_key, torrent_category, torrent_seeders=0, torrent_leechers=0, torrent_size=0):
        torrent_info = TorrentInfo(torrent_magnet, torrent_title, torrent_url, torrent_key, torrent_category, torrent_seeders, torrent_leechers, torrent_size)

        if ref_torrent_key and ref_torrent_key != torrent_key:
            Log.Info('Rejected: {0}'.format(torrent_info.title))
            return

        if torrent_info.seeders > 0 and not [t for t in torrent_infos if torrent_info.info_hash == t.info_hash]:
            Log.Info('Accepted: {0}'.format(torrent_info.title))
            torrent_infos.append(torrent_info)

    def release_contains_pattern(self, release, pattern_list):
        for pattern in pattern_list:
            if pattern.lower() in release.lower():
                return True
        return False

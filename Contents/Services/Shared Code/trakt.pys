###############################################################################
import decorators

###############################################################################
TRAKT     = 'http://trakt.tv'
TRAKT_API = 'http://api.trakt.tv'
API_KEY   = '480555541c12a378b1aac15054a95698'

###############################################################################
def movies_search(query, movie_ids):
    json_url  = TRAKT_API + '/search/movies.json/' + API_KEY + '?query=' + String.Quote(query)
    json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1HOUR)

    for json_item in json_data:
        movie_ids.append(json_item['imdb_id'])

###############################################################################
def movies_get_from_page(page, movie_ids, cur_movie_count, max_movie_count):
    movie_ids_skip = set()

    page_index = 0
    while len(movie_ids) != max_movie_count:
        page_index = page_index + 1
        html_url   = TRAKT + page + '/' + str(page_index)
        html_data  = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        has_items = False
        for html_item in html_data.xpath('//*[@class="library-show"]/h4/a[@class="title"]/@href'):
            has_items = True
            movie_id  = html_item[7:]

            if len(movie_ids_skip) < cur_movie_count:
                movie_ids_skip.add(movie_id)
            else:
                if movie_id not in movie_ids and movie_id not in movie_ids_skip:
                    movie_ids.append(movie_id)
                    if len(movie_ids) == max_movie_count:
                        break

        if not has_items:
            break

    return len(movie_ids_skip) + len(movie_ids)

###############################################################################
def fill_metadata_object(metadata_object, movie_id):
    movie_metadata = get_movie_metadata(movie_id)
    if not movie_metadata:
        return

    try:
        metadata_object.duration = movie_metadata['duration']
    except:
        pass
    
    try:
        metadata_object.title = movie_metadata['title']
    except:
        pass

    try:
        metadata_object.tagline = movie_metadata['tagline']
    except:
        pass

    try:
        metadata_object.summary = movie_metadata['summary']
    except:
        pass

    try:
        metadata_object.rating = movie_metadata['rating']
    except:
        pass

    try:
        metadata_object.thumb = movie_metadata['thumb']
    except:
        pass

    try:
        metadata_object.art = movie_metadata['art']
    except:
        pass
    
    try:
        metadata_object.originally_available_at = movie_metadata['originally_available_at']
        metadata_object.year                    = metadata_object.originally_available_at.year
    except:
        pass

    try:
        metadata_object.studio = movie_metadata['studio']
    except:
        pass

    try:
        for genre in movie_metadata['genres']:
            metadata_object.genres.add(genre)
    except:
        pass

    try:
        for director in movie_metadata['directors']:
            metadata_object.directors.add(director)
    except:
        pass

    try:
        for writer in movie_metadata['writers']:
            metadata_object.writers.add(writer)
    except:
        pass

    try:
        for producer in movie_metadata['producers']:
            metadata_object.producers.add(producer)
    except:
        pass

    try:
        for role in movie_metadata['roles']:
            new_role       = metadata_object.roles.new()
            new_role.actor = role['character']
            new_role.role  = role['name']
            new_role.photo = role['photo']
    except:
        pass

    try:
        for country in movie_metadata['countries']:
            metadata_object.countries.add(country)
    except:
        pass

    return movie_metadata['imdb_id']

###############################################################################
@decorators.memoized
def get_movie_metadata(movie_id):
    try:
        movie_data = get_data(movie_id)
    except Exception as exception:
        Log.Error('[BitTorrent][trakt] Unhandled exception: {0}'.format(exception))
        return

    movie_metadata = {}

    movie_metadata['imdb_id'] = movie_data['imdb_id']

    try:
        movie_metadata['duration'] = int(movie_data['runtime']) * 60 * 1000
        movie_metadata['title']    = movie_data['title']
        movie_metadata['tagline']  = movie_data['tagline']
        movie_metadata['summary']  = movie_data['overview']
        movie_metadata['rating']   = float(movie_data['ratings']['percentage']) / 10.0
        movie_metadata['thumb']    = movie_data['images']['poster']
        movie_metadata['art']      = movie_data['images']['fanart']
    except:
        pass

    try:
        movie_metadata['originally_available_at'] = Datetime.FromTimestamp(int(movie_data['released']))
        movie_metadata['year']                    = movie_metadata['year']
    except:
        pass
        
    movie_metadata['genres'] = []
    for genre in movie_data['genres']:
        movie_metadata['genres'].append(genre)

    movie_metadata['directors'] = []
    for member in movie_data['people']['directors']:
        movie_metadata['directors'].append(member['name'])

    movie_metadata['writers'] = []
    for member in movie_data['people']['writers']:
        movie_metadata['writers'].append(member['name'])

    movie_metadata['producers'] = []
    for member in movie_data['people']['producers']:
        movie_metadata['producers'].append(member['name'])

    movie_metadata['roles'] = []
    for member in movie_data['people']['actors']:
        role = { 'character': member['character'], 'name': member['name'], 'photo': member['images']['headshot'] }
        movie_metadata['roles'].append(role)

    movie_metadata['actors'] = []
    for member in movie_data['people']['actors']:
        movie_metadata['actors'].append(member['name'])

    return movie_metadata

###############################################################################
@decorators.memoized
def get_data(movie_id):
    json_url  = TRAKT_API + '/movie/summary.json/' + API_KEY + '/' + movie_id
    json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)
    return json_data

###############################################################################
import common
import decorators
import fuzzywuzzy
import isodate
import re
import urllib2

###############################################################################
TRAKT     = 'http://trakt.tv'
TRAKT_API = 'http://api.trakt.tv'
API_KEY   = '480555541c12a378b1aac15054a95698'

###############################################################################
# COMMON
###############################################################################
def get_ids_from_page(page, ids, cur_count, max_count):
    ids_skip = set()

    page_index = 0
    while len(ids) != max_count:
        page_index = page_index + 1
        html_url   = TRAKT + page + '/' + str(page_index)
        html_data  = HTML.ElementFromURL(html_url, cacheTime=CACHE_1HOUR)

        has_items = False
        for html_item in html_data.xpath('//*[@class="library-show"]/h4/a[@class="title"]/@href'):
            has_items = True
            id = html_item[html_item.rfind('/') + 1:]

            if len(ids_skip) < cur_count:
                ids_skip.add(id)
            else:
                if id not in ids and id not in ids_skip:
                    ids.append(id)
                    if len(ids) == max_count:
                        break

        if not has_items:
            break

    return len(ids_skip) + len(ids)

###############################################################################
# MOVIES
###############################################################################
@decorators.memoized
def movies_genres():
    json_url  = TRAKT_API + '/genres/movies.json/' + API_KEY
    json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)

    result = []
    for json_item in json_data:
        result.append((json_item['name'], json_item['slug']))
    return result

###############################################################################
def movies_search(query, movie_ids):
    json_url  = TRAKT_API + '/search/movies.json/' + API_KEY + '?query=' + String.Quote(query)
    json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1HOUR)

    for json_item in json_data:
        if json_item['imdb_id']:
            movie_ids.append(json_item['imdb_id'])

###############################################################################
@decorators.memoized
def movies_get_imdb_id_from_title(movie_title, movie_year):
    try:
        if movie_title:
            json_url  = TRAKT_API + '/search/movies.json/' + API_KEY + '?query=' + String.Quote(movie_title)
            json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)
            
            for json_item in json_data:
                if str(json_item['year']) == movie_year:
                    return json_item['imdb_id']

            return json_data[0]['imdb_id']
    except:
        pass

    return None

###############################################################################
def movies_get_imdb_id_from_torrent_title(torrent_title):
    try:
        movie_title = common.RE_MOVIE_TITLE.search(torrent_title).group(1).replace('.', ' ')
        movie_year  = common.RE_MOVIE_TITLE.search(torrent_title).group(2)
        return movies_get_imdb_id_from_title(movie_title, movie_year)
    except:
        return None

###############################################################################
def movies_fill_movie_object(movie_object, movie_id):
    movie_data = movies_get_data(movie_id)
    if not movie_data:
        return
    
    try:
        for genre in movie_data['genres']:
            movie_object.genres.add(genre)
    except:
        pass

    try:
        movie_object.duration = int(movie_data['runtime']) * 60 * 1000
    except:
        pass

    try:
        movie_object.rating = float(movie_data['ratings']['percentage']) / 10.0
    except:
        pass

    try:
        movie_object.title = movie_data['title']
    except:
        pass

    try:
        movie_object.year = int(movie_data['year'])
    except:
        pass

    try:
        movie_object.originally_available_at = Datetime.FromTimestamp(int(movie_data['released']))
    except:
        pass

    try:
        movie_object.tagline = movie_data['tagline']
    except:
        pass

    try:
        movie_object.summary = movie_data['overview']
    except:
        pass

    try:
        movie_object.content_rating = movie_data['certification']
    except:
        pass

    try:
        movie_object.thumb = movie_data['images']['poster']
    except:
        pass

    try:
        movie_object.art = movie_data['images']['fanart']
    except:
        pass

    try:
        for member in movie_data['people']['actors']:
            new_role       = movie_object.roles.new()
            new_role.actor = member['character']
            new_role.role  = member['name']
            new_role.photo = member['images']['headshot']
    except:
        pass

    try:
        for member in movie_data['people']['directors']:
            movie_object.directors.add(member['name'])
    except:
        pass

    try:
        for member in movie_data['people']['producers']:
            movie_object.producers.add(member['name'])
    except:
        pass

    try:
        for member in movie_data['people']['writers']:
            movie_object.writers.add(member['name'])
    except:
        pass

    return movie_data['imdb_id']

###############################################################################
@decorators.memoized
def movies_get_data(movie_id):
    try:
        json_url  = TRAKT_API + '/movie/summary.json/' + API_KEY + '/' + movie_id
        json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

###############################################################################
# TVSHOWS
###############################################################################
@decorators.memoized
def tvshows_genres():
    json_url  = TRAKT_API + '/genres/shows.json/' + API_KEY
    json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)

    result = []
    for json_item in json_data:
        result.append((json_item['name'], json_item['slug']))
    return result

def tvshows_search(query, tvshow_ids):
    json_url  = TRAKT_API + '/search/shows.json/' + API_KEY + '?query=' + String.Quote(query)
    json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1HOUR)

    for json_item in json_data:
        tvshow_ids.append(json_item['tvdb_id'])

###############################################################################
def tvshows_get_title(tvshow_id):
    tvshow_data = tvshow_get_data(tvshow_id)
    return tvshow_data['title']

###############################################################################
def tvshows_is_date_based(tvdb_id):
    return int(tvdb_id) in [
                                71256,  # The Daily Show with Jon Stewart
                                71998,  # Jimmy Kimmel Live
                                72231,  # Real Time With Bill Maher
                                79274,  # The Colbert Report
                                270261, # The Tonight Show Starring Jimmy Fallon
                                270262, # Late Night with Seth Meyers
                           ]

###############################################################################
def tvshows_get_search_title(tvshow_id):
    title = tvshows_get_title(tvshow_id)
    title = title.replace('\'', '').replace(':', '').replace(u'\u00A0', ' ')
    title = title.replace('Cosmos A Spacetime Odyssey', 'Cosmos A Space-Time Odyssey')
    title = title.replace('The Daily Show with Jon Stewart', 'The Daily Show')
    title = title.replace('The Tonight Show Starring Jimmy Fallon', 'Jimmy Fallon')
    title = title.replace('Jimmy Kimmel Live', 'Jimmy Kimmel')
    title = title.replace('Late Night with Seth Meyers', 'Seth Meyers')
    return title

###############################################################################
def tvshows_get_season_index_list(tvshow_id):
    season_index_list = []

    tvshow_data = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return season_index_list

    for season_data in tvshow_data['seasons']:
        if season_data['season'] != 0 and tvshows_get_season_episode_index_list(tvshow_id, season_data['season']):
            season_index_list.append(season_data['season'])

    return sorted(season_index_list)

###############################################################################
def tvshows_get_season_episode_index_list(tvshow_id, season_index):
    episode_index_list = []

    tvshow_data = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return episode_index_list

    season_data = None
    for season in tvshow_data['seasons']:
        if season['season'] == season_index:
            season_data = season
            break
    if not season_data:
        return episode_index_list

    for episode_data in season_data['episodes']:
        if int(episode_data['first_aired']) and Datetime.FromTimestamp(episode_data['first_aired']) <= Datetime.Now():
            episode_index_list.append(episode_data['episode'])

    return sorted(episode_index_list)

###############################################################################
def tvshows_get_season_episode_count(tvshow_id, season_index):
    tvshow_data = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return 0

    season_data = None
    for season in tvshow_data['seasons']:
        if season['season'] == season_index:
            season_data = season
            break
    if not season_data:
        return 0

    return len(season_data['episodes'])

###############################################################################
@decorators.memoized
def tvshows_get_tvdb_id_from_title(tvshow_title):
    try:
        if tvshow_title:
            if tvshow_title.lower() == 'battlestar galactica':
                return 73545
            elif tvshow_title.lower() == 'jimmy fallon':
                return 270261

            json_url  = TRAKT_API + '/search/shows.json/' + API_KEY + '?query=' + String.Quote(tvshow_title)
            json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)
            
            choices = [json_item['title'] for json_item in json_data if json_item['tvdb_id'] and json_item['first_aired']]
            results = fuzzywuzzy.extract(tvshow_title, choices)

            if results:
                for json_item in json_data:
                    if json_item['title'] == results[0][0]:
                        return json_item['tvdb_id']
    
    except urllib2.URLError as exception:
        Log.Error('URLError: {0}'.format(exception))
    
    return None

###############################################################################
def tvshows_get_episode_tvdb_id(tvdb_id, season_index, episode_index, first_aired_iso):
    if not tvdb_id:
        return None

    if not tvshows_is_date_based(tvdb_id):
        return (int(tvdb_id), int(season_index), int(episode_index))
    else:
        air_date = isodate.parse_datetime(first_aired_iso)
        return (int(tvdb_id), int(air_date.year), int(air_date.month), int(air_date.day))

###############################################################################
def tvshows_get_episode_tvdb_id_from_torrent_title(torrent_title):
    tvshow_title_result = common.RE_TVSHOW_TITLE_DATE.search(torrent_title)
    if tvshow_title_result:
        tvshow_title = tvshow_title_result.group(1).replace('.', ' ')
        tvshow_year  = tvshow_title_result.group(2)
        tvshow_month = tvshow_title_result.group(3)
        tvshow_day   = tvshow_title_result.group(4)

        tvshow_tvdb_id = tvshows_get_tvdb_id_from_title(tvshow_title)
        return (int(tvshow_tvdb_id), int(tvshow_year), int(tvshow_month), int(tvshow_day))

    tvshow_title_result = common.RE_TVSHOW_TITLE.search(torrent_title)
    if tvshow_title_result:
        tvshow_title  = tvshow_title_result.group(1).replace('.', ' ')
        season_index  = tvshow_title_result.group(3)
        episode_index = tvshow_title_result.group(5)

        tvshow_tvdb_id = tvshows_get_tvdb_id_from_title(tvshow_title)
        return (int(tvshow_tvdb_id), int(season_index), int(episode_index))

###############################################################################
def tvshows_fill_tvshow_object(tvshow_object, tvshow_id):
    tvshow_data = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return

    try:
        tvshow_object.title = tvshow_data['title']
    except:
        pass

    try:
        tvshow_object.summary = tvshow_data['overview']
    except:
        pass

    try:
        tvshow_object.rating = float(tvshow_data['ratings']['percentage']) / 10.0
    except:
        pass

    try:
        for genre in tvshow_data['genres']:
            tvshow_object.genres.add(genre)
    except:
        pass

    try:
        tvshow_object.duration = int(tvshow_data['runtime']) * 60 * 1000
    except:
        pass

    try:
        tvshow_object.originally_available_at = isodate.parse_datetime(tvshow_data['first_aired_iso'])
    except:
        pass

    try:
        tvshow_object.content_rating = tvshow_data['certification']
    except:
        pass

    try:
        tvshow_object.studio = tvshow_data['network']
    except:
        pass

    try:
        tvshow_object.countries = [tvshow_data['country']]
    except:
        pass

    try:
        tvshow_object.thumb = tvshow_data['images']['poster']
    except:
        pass

    try:
        tvshow_object.art = tvshow_data['images']['fanart']
    except:
        pass

    return tvshow_data['tvdb_id']

###############################################################################
def tvshows_fill_season_object(season_object, tvshow_id, season_index):
    tvshow_data = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return

    season_data = None
    for season in tvshow_data['seasons']:
        if season['season'] == season_index:
            season_data = season
            break
    if not season_data:
        return

    try:
        season_object.summary = tvshow_data['overview']
    except:
        pass

    try:
        season_object.index = int(season_data['season'])
    except:
        pass

    try:
        season_object.title = 'Season ' + str(season_data['season'])
    except:
        pass

    try:
        season_object.show = tvshow_data['title']
    except:
        pass

    try:
        season_object.episode_count = len(season_data['episodes'])
    except:
        pass

    try:
        season_object.thumb = season_data['images']['poster']
    except:
        pass

    try:
        season_object.art = tvshow_data['images']['fanart']
    except:
        pass

###############################################################################
def tvshows_fill_episode_object(episode_object, tvshow_id, season_index, episode_index):
    tvshow_data  = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return
    
    season_data = None
    for season in tvshow_data['seasons']:
        if season['season'] == season_index:
            season_data = season
            break
    if not season_data:
        return

    episode_data = None
    for episode in season_data['episodes']:
        if episode['episode'] == episode_index:
            episode_data = episode
            break
    if not episode_data:
        return

    try:
        episode_object.title = episode_data['title']
    except:
        pass

    try:
        episode_object.summary = episode_data['overview']
    except:
        pass

    try:
        episode_object.thumb = episode_data['images']['screen']
    except:
        pass

    try:
        episode_object.art = episode_data['images']['screen']
    except:
        pass

    try:
        episode_object.duration = int(tvshow_data['runtime']) * 60 * 1000
    except:
        pass

    try:
        episode_object.originally_available_at = isodate.parse_datetime(episode_data['first_aired_iso'])
    except:
        pass

    try:
        episode_object.rating = float(episode_data['ratings']['percentage']) / 10.0
    except:
        pass

    try:
        episode_object.show = tvshow_data['title']
    except:
        pass

    try:
        episode_object.season = int(episode_data['season'])
    except:
        pass

    try:
        episode_object.index = int(episode_data['episode'])
    except:
        pass

    try:
        for member in tvshow_data['people']['actors']:
            new_role       = episode_object.roles.new()
            new_role.actor = member['character']
            new_role.role  = member['name']
            new_role.photo = member['images']['headshot']
    except:
        pass

    try:
        for member in tvshow_data['people']['directors']:
            episode_object.directors.add(member['name'])
    except:
        pass

    try:
        for member in tvshow_data['people']['producers']:
            episode_object.producers.add(member['name'])
    except:
        pass

    try:
        for member in tvshow_data['people']['writers']:
            episode_object.writers.add(member['name'])
    except:
        pass

    return episode_data

###############################################################################
@decorators.memoized
def tvshow_get_data(tvshow_id):
    try:
        json_url  = TRAKT_API + '/show/summary.json/' + API_KEY + '/' + str(tvshow_id) + '/full'
        json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

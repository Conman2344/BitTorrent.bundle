###############################################################################
import common
import decorators
import fuzzywuzzy
import re
import urllib2

try:
    import isodate
except:
    pass

###############################################################################
TRAKT_API     = 'https://api.trakt.tv'
TRAKT_API_KEY = '64cf92c702ff753cc14a6d421824efcd32f22058f79bf6d637fa92e23229f35f'

###############################################################################
# MOVIES
###############################################################################
def movies_list(page, page_index, per_page):
    json_url     = TRAKT_API + page + '?page=' + str(page_index) + '&limit=' + str(per_page)
    json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
    json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)

    result = []
    for json_item in json_data:
        try:
            if 'movie' in json_item:
                result.append(json_item['movie']['ids']['slug'])
            else:
                result.append(json_item['ids']['slug'])
        except Exception as exception:
            Log.Error('Unhandled exception: {0}'.format(exception))
                
    return result

###############################################################################
def movies_search(query):
    json_url     = TRAKT_API + '/search?query=' + String.Quote(query) + '&type=movie'
    json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
    json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)

    result = []
    for json_item in json_data:
        result.append(json_item['movie']['ids']['slug'])
    return result

###############################################################################
@decorators.memoized
def movies_get_imdb_id_from_title(movie_title, movie_year):
    try:
        if movie_title:
            json_url     = TRAKT_API + '/search?query=' + String.Quote(movie_title) + '&type=movie'
            json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
            json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
            
            for json_item in json_data:
                if str(json_item['movie']['year']) == movie_year:
                    return json_item['movie']['ids']['imdb']

            return json_data[0]['movie']['ids']['imdb']

    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

    return None

###############################################################################
def movies_get_imdb_id_from_torrent_title(torrent_title):
    try:
        movie_title = common.RE_MOVIE_TITLE.search(torrent_title).group(1).replace('.', ' ')
        movie_year  = common.RE_MOVIE_TITLE.search(torrent_title).group(2)
        return movies_get_imdb_id_from_title(movie_title, movie_year)
    except:
        return None

###############################################################################
def movies_fill_movie_object(movie_object, movie_id):
    movie_data = movies_get_data(movie_id)
    if not movie_data:
        return

    try:
        for genre in movie_data['genres']:
            movie_object.genres.add(genre)
    except:
        pass

    try:
        movie_object.duration = int(movie_data['runtime']) * 60 * 1000
    except:
        pass

    try:
        movie_object.rating = float(movie_data['ratings'])
    except:
        pass

    try:
        movie_object.title = movie_data['title']
    except:
        pass

    try:
        movie_object.year = int(movie_data['year'])
    except:
        pass

    try:
        movie_object.originally_available_at = Datetime.FromTimestamp(int(movie_data['released']))
    except:
        pass

    try:
        movie_object.tagline = movie_data['tagline']
    except:
        pass

    try:
        movie_object.summary = movie_data['overview']
    except:
        pass

    try:
        movie_object.content_rating = movie_data['certification']
    except:
        pass

    try:
        movie_object.thumb = movie_data['images']['poster']['full']
    except:
        pass

    try:
        movie_object.art = movie_data['images']['fanart']['full']
    except:
        pass

    people_data = movies_get_people(movie_id)
    if people_data:
        try:
            for member in people_data['cast']:
                new_role       = movie_object.roles.new()
                new_role.actor = member['character']
                new_role.role  = member['person']['name']
        except:
            pass

        try:
            for member in people_data['crew']['directing']:
                movie_object.directors.add(member['person']['name'])
        except:
            pass

        try:
            for member in people_data['crew']['production']:
                movie_object.directors.add(member['person']['name'])
        except:
            pass

        try:
            for member in people_data['people']['writing']:
                movie_object.writers.add(member['person']['name'])
        except:
            pass

    return movie_data['ids']['imdb']

###############################################################################
@decorators.memoized
def movies_get_data(movie_id):
    try:
        json_url     = TRAKT_API + '/movies/' + movie_id + '?extended=full,images'
        json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
        json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

###############################################################################
@decorators.memoized
def movies_get_people(movie_id):
    try:
        json_url     = TRAKT_API + '/movies/' + movie_id + '/people'
        json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
        json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

###############################################################################
# TVSHOWS
###############################################################################
def tvshows_list(page, page_index, per_page):
    json_url     = TRAKT_API + page + '?page=' + str(page_index) + '&limit=' + str(per_page)
    json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
    json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)

    result = []
    for json_item in json_data:
        try:
            if 'show' in json_item:
                result.append(json_item['show']['ids']['slug'])
            else:
                result.append(json_item['ids']['slug'])
        except Exception as exception:
            Log.Error('Unhandled exception: {0}'.format(exception))
                
    return result

###############################################################################
def tvshows_search(query):
    json_url     = TRAKT_API + '/search?query=' + String.Quote(query) + '&type=show'
    json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
    json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)

    result = []
    for json_item in json_data:
        result.append(json_item['show']['ids']['slug'])
    return result

###############################################################################
def tvshows_get_title(tvshow_id):
    tvshow_data = tvshow_get_data(tvshow_id)
    return tvshow_data['title']

###############################################################################
def tvshows_is_date_based(tvshow_id):
    return tvshow_id in [   
                            'the-daily-show',
                            'jimmy-kimmel-live',
                            'real-time-with-bill-maher',
                            'the-colbert-report',
                            'the-tonight-show-starring-jimmy-fallon',
                            'late-night-with-seth-meyers'
                        ]

###############################################################################
def tvshows_get_search_title(tvshow_id):
    title = tvshows_get_title(tvshow_id)
    title = title.replace('\'', '').replace(':', '').replace('!', '').replace('?', '').replace(u'\u00A0', ' ')
    title = title.replace('Cosmos A Spacetime Odyssey', 'Cosmos A Space-Time Odyssey')
    title = title.replace('The Daily Show with Jon Stewart', 'The Daily Show')
    title = title.replace('The Tonight Show Starring Jimmy Fallon', 'Jimmy Fallon')
    title = title.replace('Jimmy Kimmel Live', 'Jimmy Kimmel')
    title = title.replace('Late Night with Seth Meyers', 'Seth Meyers')
    return title

###############################################################################
def tvshows_get_season_index_list(tvshow_id):
    seasons_index_list = []

    seasons_data = tvshow_get_seasons_data(tvshow_id)
    if not seasons_data:
        return season_index_list

    for season_data in seasons_data:
        if season_data['number'] != 0 and tvshows_get_season_episode_index_list(tvshow_id, season_data['number']):
            seasons_index_list.append(season_data['number'])

    return sorted(seasons_index_list)

###############################################################################
def tvshows_get_season_episode_index_list(tvshow_id, season_index):
    episode_index_list = []

    season_data = tvshow_get_season_data(tvshow_id, season_index)
    if not season_data:
        return episode_index_list

    for episode_data in season_data:
        if isodate.parse_datetime(episode_data['first_aired']).replace(tzinfo=None) <= Datetime.Now():
            episode_index_list.append(episode_data['number'])

    return sorted(episode_index_list)

###############################################################################
@decorators.memoized
def tvshows_get_tvshow_id_from_title(tvshow_title):
    try:
        if tvshow_title:
            if tvshow_title.lower() == 'battlestar galactica':
                return 'battlestar-galactica-2005'

            json_url     = TRAKT_API + '/search?query=' + String.Quote(tvshow_title) + '&type=show'
            json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
            json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
            
            choices = [json_item['show']['title'] for json_item in json_data if json_item['show']['ids']['slug']]
            results = fuzzywuzzy.extract(tvshow_title, choices)

            if results:
                for json_item in json_data:
                    if json_item['show']['title'] == results[0][0]:
                        return json_item['show']['ids']['slug']
    
    except urllib2.URLError as exception:
        Log.Error('URLError: {0}'.format(exception))
    
    return None

###############################################################################
def tvshows_get_episode_id(tvshow_id, season_index, episode_index):
    if not tvshow_id:
        return None

    return (tvshow_id, int(season_index), int(episode_index))

###############################################################################
def tvshows_get_episode_id_from_date(tvshow_id, year, month, day):
    tvshow_data = tvshow_get_data(tvshow_id)
    if tvshow_data:
        for season in tvshow_data['seasons']:
            for episode in season['episodes']:
                if episode['first_aired_iso'].startswith('%d-%02d-%02d' % (int(year), int(month), int(day))):
                    return (int(episode['season']), int(episode['episode']))

    return (0, 0)

###############################################################################
def tvshows_get_episode_id_from_torrent_title(torrent_title):
    tvshow_title_result = common.RE_TVSHOW_TITLE_DATE.search(torrent_title)
    if tvshow_title_result:
        tvshow_title = tvshow_title_result.group(1).replace('.', ' ')
        tvshow_year  = tvshow_title_result.group(2)
        tvshow_month = tvshow_title_result.group(3)
        tvshow_day   = tvshow_title_result.group(4)

        tvshow_id                                 = tvshows_get_tvshow_id_from_title(tvshow_title)
        tvshow_season_index, tvshow_episode_index = tvshows_get_episode_id_from_date(tvshow_id, tvshow_year, tvshow_month, tvshow_day)
        return (tvshow_id, int(tvshow_season_index), int(tvshow_episode_index))

    tvshow_title_result = common.RE_TVSHOW_TITLE.search(torrent_title)
    if tvshow_title_result:
        tvshow_title         = tvshow_title_result.group(1).replace('.', ' ')
        tvshow_season_index  = tvshow_title_result.group(3)
        tvshow_episode_index = tvshow_title_result.group(5)

        tvshow_id = tvshows_get_tvshow_id_from_title(tvshow_title)
        return (tvshow_id, int(tvshow_season_index), int(tvshow_episode_index))

###############################################################################
def tvshows_fill_tvshow_object(tvshow_object, tvshow_id):
    tvshow_data = tvshow_get_data(tvshow_id)
    if not tvshow_data:
        return

    try:
        tvshow_object.title = tvshow_data['title']
    except:
        pass

    try:
        tvshow_object.summary = tvshow_data['overview']
    except:
        pass

    try:
        tvshow_object.rating = float(tvshow_data['ratings']['percentage']) / 10.0
    except:
        pass

    try:
        for genre in tvshow_data['genres']:
            tvshow_object.genres.add(genre)
    except:
        pass

    try:
        tvshow_object.duration = int(tvshow_data['runtime']) * 60 * 1000
    except:
        pass

    try:
        tvshow_object.originally_available_at = isodate.parse_datetime(tvshow_data['first_aired_iso'])
    except:
        pass

    try:
        tvshow_object.content_rating = tvshow_data['certification']
    except:
        pass

    try:
        tvshow_object.studio = tvshow_data['network']
    except:
        pass

    try:
        tvshow_object.countries = [tvshow_data['country']]
    except:
        pass

    try:
        tvshow_object.thumb = tvshow_data['images']['poster']['full']
    except:
        pass

    try:
        tvshow_object.art = tvshow_data['images']['fanart']['full']
    except:
        pass

    return tvshow_data['ids']['slug']

###############################################################################
def tvshows_fill_season_object(season_object, tvshow_id, season_index):
    tvshow_data = tvshow_get_data(tvshow_id)
    if tvshow_data:
        try:
            season_object.show = tvshow_data['title']
        except:
            pass

        try:
            season_object.art = tvshow_data['images']['fanart']['full']
        except:
            pass

    seasons_data = tvshow_get_seasons_data(tvshow_id)
    if seasons_data:
        for season_data in seasons_data:
            if season_data['number'] == season_index:
                try:
                    season_object.index = season_data['number']
                    season_object.title = 'Season ' + str(season_object.index)
                except:
                    pass

                try:
                    season_object.summary = season_data['overview']
                except:
                    pass

                try:
                    season_object.episode_count = season_data['episode_count']
                except:
                    pass

                try:
                    season_object.thumb = season_data['images']['poster']['full']
                except:
                    pass

                break

###############################################################################
def tvshows_fill_episode_object(episode_object, tvshow_id, season_index, episode_index):
    tvshow_data  = tvshow_get_data(tvshow_id)
    if tvshow_data:
        try:
            episode_object.show = tvshow_data['title']
        except:
            pass

        try:
            episode_object.duration = int(tvshow_data['runtime']) * 60 * 1000
        except:
            pass
    
    season_data = tvshow_get_season_data(tvshow_id, season_index)
    if season_data:
        for episode_data in season_data:
            if episode_data['number'] == episode_index:
                try:
                    episode_object.title = episode_data['title']
                except:
                    pass

                try:
                    episode_object.summary = episode_data['overview']
                except:
                    pass

                try:
                    episode_object.thumb = episode_data['images']['screenshot']['full']
                except:
                    pass

                try:
                    episode_object.art = episode_data['images']['screenshot']['full']
                except:
                    pass

                try:
                    episode_object.originally_available_at = isodate.parse_datetime(episode_data['first_aired'])
                except:
                    pass

                try:
                    episode_object.rating = float(episode_data['ratings'])
                except:
                    pass

                try:
                    episode_object.season = season_index
                except:
                    pass

                try:
                    episode_object.index = episode_data['number']
                except:
                    pass

                # try:
                #     for member in tvshow_data['people']['actors']:
                #         new_role       = episode_object.roles.new()
                #         new_role.actor = member['character']
                #         new_role.role  = member['name']
                #         new_role.photo = member['images']['headshot']
                # except:
                #     pass

                # try:
                #     for member in tvshow_data['people']['directors']:
                #         episode_object.directors.add(member['name'])
                # except:
                #     pass

                # try:
                #     for member in tvshow_data['people']['producers']:
                #         episode_object.producers.add(member['name'])
                # except:
                #     pass

                # try:
                #     for member in tvshow_data['people']['writers']:
                #         episode_object.writers.add(member['name'])
                # except:
                #     pass

                return episode_data

###############################################################################
@decorators.memoized
def tvshow_get_data(tvshow_id):
    try:
        json_url     = TRAKT_API + '/shows/' + tvshow_id + '?extended=full,images'
        json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
        json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

###############################################################################
@decorators.memoized
def tvshow_get_seasons_data(tvshow_id):
    try:
        json_url     = TRAKT_API + '/shows/' + tvshow_id + '/seasons' + '?extended=full,images'
        json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
        json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

###############################################################################
@decorators.memoized
def tvshow_get_season_data(tvshow_id, season_index):
    try:
        json_url     = TRAKT_API + '/shows/' + tvshow_id + '/seasons/' + str(season_index) + '?extended=full,images'
        json_headers = { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }
        json_data    = JSON.ObjectFromURL(json_url, headers=json_headers, cacheTime=CACHE_1WEEK)
        return json_data
    except Exception as exception:
        Log.Error('Unhandled exception: {0}'.format(exception))

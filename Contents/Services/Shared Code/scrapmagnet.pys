###############################################################################
import base64
import common
import platform
import os
import re
import stat
import socket
import subprocess
import time
import utils

###############################################################################
RE_MAGNET_INFO_HASH = re.compile('xt=urn:btih:([a-zA-Z0-9]+)')
MIXPANEL_TOKEN      = '63b4a20135a998db7eef5bbca5743df6'
THREAD_CREATE       = None

###############################################################################
def log_thread_func(process):
    Log.Info('Log thread starting')
    line = process.stdout.readline()
    while line:
        Log.Info(line.rstrip())
        line = process.stdout.readline()
    Log.Info('Log thread stopping')

###############################################################################
def start():
    try:
        os.chmod(get_exec_path(), stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
    except Exception as exception:
        Log.Error('Failed set scrapmagnet permissions: {0}'.format(repr(exception)))

    try:
        max_download_rate = int(float(Prefs['MAX_DOWNLOAD_RATE']))
    except:
        max_download_rate = 0
        Log.Error('Invalid Max Download Rate value ({0}): Defaulting to {1}'.format(Prefs['MAX_DOWNLOAD_RATE'], max_download_rate))

    try:
        max_upload_rate = int(float(Prefs['MAX_UPLOAD_RATE']))
    except:
        max_upload_rate = 0
        Log.Error('Invalid Max Upload Rate value ({0}): Defaulting to {1}'.format(Prefs['MAX_UPLOAD_RATE'], max_upload_rate))

    try:
        inactivity_remove_timeout = int(float(Prefs['TORRENT_INACTIVITY_REMOVE_TIMEOUT']))
    except:
        inactivity_remove_timeout = 0
        Log.Error('Invalid Torrent inactivity remove timeout value ({0}): Defaulting to {1}'.format(Prefs['TORRENT_INACTIVITY_REMOVE_TIMEOUT'], inactivity_remove_timeout))

    mixpanel_data = { 'Channel Version': common.VERSION }
    mixpanel_data = JSON.StringFromObject(mixpanel_data)
    mixpanel_data = base64.b64encode(mixpanel_data)

    command =   [
                    get_exec_path(),
                    '-ppid', str(os.getpid()),
                    '-http-port', str(common.HTTP_PORT),
                    '-log-port', str(common.LOG_PORT),
                    '-bittorrent-port', str(Prefs['INCOMING_PORT']),
                    '-keep-files={0}'.format(Prefs['KEEP_FILES']),
                    '-upnp-natpmp-enabled={0}'.format(Prefs['UPNP_NATPMP_ENABLED']),
                    '-max-download-rate', str(max_download_rate),
                    '-max-upload-rate', str(max_upload_rate),
                    '-inactivity-remove-timeout', str(inactivity_remove_timeout),
                    '-proxy-type', str(Prefs['TORRENT_PROXY_TYPE']),
                    '-proxy-host', str(Prefs['TORRENT_PROXY_HOST']),
                    '-proxy-port', str(Prefs['TORRENT_PROXY_PORT']) if Prefs['TORRENT_PROXY_PORT'] else "1080",
                    '-proxy-user', str(Prefs['TORRENT_PROXY_USER']),
                    '-proxy-password', str(Prefs['TORRENT_PROXY_PASSWORD']),
                    '-mixpanel-token', MIXPANEL_TOKEN,
                    '-mixpanel-data', mixpanel_data,
                ]

    Log.Info('Starting scrapmagnet')
    Log.Info(' '.join(command))

    try:
        if Platform.OS == 'Windows':
            DETACHED_PROCESS = 0x00000008
            process = subprocess.Popen(command, close_fds=True, creationflags=DETACHED_PROCESS | subprocess.CREATE_NEW_PROCESS_GROUP)
        else:
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        global THREAD_CREATE
        if THREAD_CREATE:
            THREAD_CREATE(log_thread_func, process=process)

    except Exception as exception:
        Log.Error('Failed to start scrapmagnet: {0}'.format(repr(exception)))

###############################################################################
def is_running():
    try:
        JSON.ObjectFromURL(get_url(''), cacheTime=0, timeout=10)
        return True
    except Exception as exception:
        Log.Error('Server unreachable: {0}'.format(repr(exception)))

    return False

###############################################################################
def is_incoming_port_open():
    try:
        result = JSON.ObjectFromURL('http://tuq.in/tools/port.json?port={0}'.format(str(Prefs['INCOMING_PORT'])))
        return (result == True)
    except Exception as exception:
        Log.Error('Failed to check if incoming port is open: {0}'.format(repr(exception)))

###############################################################################
def stop():
    try:
        Log.Info('Stopping scrapmagnet')
        HTML.ElementFromURL(get_url('shutdown'), cacheTime=0, timeout=10)
        while is_running():
            time.sleep(100)
    except:
        pass

###############################################################################
def get_bin_dir():
    bundle_directory = os.path.join(os.getcwd(), '..', '..', '..', 'Plug-ins', 'BitTorrent.bundle')
    bundle_directory = bundle_directory.replace('\\\\?\\', '')
    return os.path.normpath(os.path.join(bundle_directory, 'Contents', 'Bin'))

###############################################################################
def get_exec_path():
    if Platform.OS == 'MacOSX':
        return os.path.join(get_bin_dir(), 'darwin_amd64', 'scrapmagnet')
    elif Platform.OS == 'Linux':
        if 'arm' in os.uname()[4]:
            return os.path.join(get_bin_dir(), 'linux_arm', 'scrapmagnet')
        else:
            if Prefs['SCRAPMAGNET_VERSION'] != 'Auto':
                architecture = Prefs['SCRAPMAGNET_VERSION']
            else:
                architecture = platform.architecture()[0]
            if architecture == '64bit':
                return os.path.join(get_bin_dir(), 'linux_amd64', 'scrapmagnet')
            elif architecture == '32bit':
                return os.path.join(get_bin_dir(), 'linux_386', 'scrapmagnet')
    elif Platform.OS == 'Windows':
        return os.path.join(get_bin_dir(), 'windows_386', 'scrapmagnet.exe')

    Log.Error('Unsupported OS: {0}'.format(Platform.OS))

###############################################################################
def get_url(page):
    local_host = utils.get_local_host()
    return 'http://{0}:{1}/{2}'.format(local_host, common.HTTP_PORT, page)

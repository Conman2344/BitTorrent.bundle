################################################################################
import common
import re
import scrapmagnet
import tracking
import utils

RE_MAGNET = re.compile('\?magnet=(.+)$')

################################################################################
def MetadataObjectForURL(url):
    magnet = String.Unquote(RE_MAGNET.search(url).group(1))

    json_data = JSON.ObjectFromURL(url, cacheTime=CACHE_1HOUR)

    if json_data and 'magnets' in json_data:
        for magnet_data in json_data['magnets']:
            if magnet_data['link'] == magnet:
                if '/api/movie' in url:
                    movie_object = MovieObject()
                    common.fill_movie_object(movie_object, json_data)
                    movie_object.summary = '{0}\nSeeds: {1}, Peers: {2}\n\n{3}'.format(magnet_data['title'], magnet_data['seeds'], magnet_data['peers'], movie_object.summary)
                    movie_object.thumb   = Callback(get_image_async, url=json_data['thumb'])
                    movie_object.art     = Callback(get_image_async, url=json_data['art'])
                    return movie_object

                elif '/api/show' in url:
                    episode_object = EpisodeObject()
                    common.fill_episode_object(episode_object, json_data)
                    episode_object.summary = '{0}\nSeeds: {1}, Peers: {2}\n\n{3}'.format(magnet_data['title'], magnet_data['seeds'], magnet_data['peers'], episode_object.summary)
                    episode_object.thumb   = Callback(get_image_async, url=json_data['thumb'])
                    episode_object.art     = Callback(get_image_async, url=json_data['art'])
                    return episode_object

################################################################################
@deferred
def MediaObjectsForURL(url):
    magnet = String.Unquote(RE_MAGNET.search(url).group(1))
    
    json_data = JSON.ObjectFromURL(url, cacheTime=CACHE_1HOUR)

    if '/api/movie' in url:
        download_dir  = Prefs['MOVIES_DOWNLOAD_DIR']
        tracking_data = { 'event': 'Movie', 'properties': { 'State': 'Buffering', 'Title': json_data['title'] } }
    elif '/api/show' in url:
        download_dir  = Prefs['TVSHOWS_DOWNLOAD_DIR']
        tracking_data = { 'event': 'Show', 'properties': { 'State': 'Buffering', 'Title': json_data['show_title'], 'Season': json_data['season_index'], 'Episode': json_data['episode_index'] } }

    if json_data and 'magnets' in json_data:
        for magnet_data in json_data['magnets']:
            if magnet_data['link'] == magnet:
                media_object = MediaObject()
                media_object.add(PartObject(key=Callback(play_torrent, url=url, magnet=magnet, download_dir=download_dir, tracking_data=tracking_data)))

                if title_contains_pattern(magnet_data['title'], ['avi']):
                    media_object.container = 'avi'
                elif title_contains_pattern(magnet_data['title'], ['flv']):
                    media_object.container = 'flv'
                elif title_contains_pattern(magnet_data['title'], ['mkv']):
                    media_object.container = 'mkv'
                elif title_contains_pattern(magnet_data['title'], ['mov']):
                    media_object.container = 'mov'
                elif title_contains_pattern(magnet_data['title'], ['mp4']):
                    media_object.container = 'mp4'

                if title_contains_pattern(magnet_data['title'], ['5.1', '5 1']):
                    media_object.audio_channels = 6

                if title_contains_pattern(magnet_data['title'], ['aac']):
                    media_object.audio_codec = 'aac'
                elif title_contains_pattern(magnet_data['title'], ['ac3']):
                    media_object.audio_codec = 'ac3'
                elif title_contains_pattern(magnet_data['title'], ['dts']):
                    media_object.audio_codec = 'dts'
                elif title_contains_pattern(magnet_data['title'], ['mp3']):
                    media_object.audio_codec = 'mp3'

                if title_contains_pattern(magnet_data['title'], ['x264', 'h264']):
                    media_object.video_codec = 'h264'
                elif title_contains_pattern(magnet_data['title'], ['divx']):
                    media_object.video_codec = 'divx'
                elif title_contains_pattern(magnet_data['title'], ['xvid']):
                    media_object.video_codec = 'xvid'

                if title_contains_pattern(magnet_data['title'], ['1080p', '1920x1080']):
                    media_object.video_resolution = 1080
                elif title_contains_pattern(magnet_data['title'], ['720p', '1280x720']):
                    media_object.video_resolution = 720
                elif title_contains_pattern(magnet_data['title'], ['480p']):
                    media_object.video_resolution = 480

                return [media_object]

################################################################################
def get_image_async(url):
    return Redirect(url)

################################################################################
def title_contains_pattern(title, pattern_list):
    for pattern in pattern_list:
        if pattern.lower() in title.lower():
            return True

###############################################################################
@indirect
def play_torrent(url, magnet, download_dir, tracking_data={}):
    if utils.is_connection_allowed():
        if tracking_data:
            tracking.track(tracking_data['event'], tracking_data['properties'])
        return scrapmagnet.play_torrent(url, magnet, download_dir, tracking_data, play_torrent)
    else:
        Log.Error('Torrent proxy is not configured properly. Aborting.')
        raise Ex.MediaNotAvailable

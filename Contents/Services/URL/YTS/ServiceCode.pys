################################################################################
import tmdb
import torrent2http

################################################################################
YTS       = 'http://yts.re'
YTS_LIST  = YTS + '/api/list.json?limit=50&keywords={0}'
YTS_MOVIE = YTS + '/api/movie.json?id={0}'

################################################################################
def MetadataObjectForURL(url):
	movie_data = get_movie_data(url)
	return tmdb.create_movie_object(movie_data['ImdbCode'], Callback(get_tmdb_art_async, imdb_id=movie_data['ImdbCode']), Callback(get_tmdb_thumb_async, imdb_id=movie_data['ImdbCode']))

################################################################################
@deferred
def MediaObjectsForURL(url):
	media_objects = []

	try:
		movie_data = get_movie_data(url)

		if movie_data['Quality'] == '3D':
			media_object = MediaObject()
			media_object.add(PartObject(key=Callback(PlayVideo, url=url)))
			media_object.video_resolution = get_closest_resolution(int(movie_data['Resolution'].partition('*')[2]))
			media_object.video_frame_rate = movie_data['FrameRate']
			media_objects.append(media_object)
		else:
			version_list_url  = YTS_LIST.format(movie_data['ImdbCode'])
			version_list_data = JSON.ObjectFromURL(version_list_url, cacheTime=CACHE_1DAY)

			for version in version_list_data['MovieList']:
				if version['Quality'] != '3D':
					version_url  = YTS_MOVIE.format(version['MovieID'])
					version_data = JSON.ObjectFromURL(version_url, cacheTime=CACHE_1DAY)

					media_object = MediaObject()
					media_object.add(PartObject(key=Callback(PlayVideo, url=version_data['MovieUrl'])))
					media_object.video_resolution = get_closest_resolution(int(version_data['Resolution'].partition('*')[2]))
					media_object.video_frame_rate = version_data['FrameRate']
					media_objects.append(media_object)

	except Exception as exception:
		Log.Error('[BitTorrent] [YTS] [MediaObjectsForURL] Unhandled exception: {0}'.format(exception))

	media_objects.sort(cmp=media_object_compare)
	return media_objects

################################################################################
@indirect
def PlayVideo(url):
	html   = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)
	magnet = html.xpath('//*[@class="magnet torrentDwl"]/@href')[0]
	return torrent2http.start_torrent(url, magnet)

################################################################################
def media_object_compare(a, b):
	return b.video_resolution - a.video_resolution

################################################################################
def get_movie_data(url):
	html     = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)
	movie_id = html.xpath('//*[@class="magnet torrentDwl"]/@data-movieid')[0]

	movie_data_url = YTS_MOVIE.format(movie_id)
	movie_data     = JSON.ObjectFromURL(movie_data_url, cacheTime=CACHE_1DAY)
	return movie_data

################################################################################
def get_closest_resolution(height):
	if height <= 240:
		return 240
	elif height <= 320:
		return 320
	elif height <= 480:
		return 480
	elif height <= 720:
		return 720
	else:
		return 1080

################################################################################
def get_tmdb_art_async(imdb_id):
	return tmdb.get_art(imdb_id)

################################################################################
def get_tmdb_thumb_async(imdb_id):
	return tmdb.get_thumb(imdb_id)
